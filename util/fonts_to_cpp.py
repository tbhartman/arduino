import os
import pathlib
import re
import collections

parent = pathlib.Path(__file__).parent

def namesToRe(names:list[str], regexp:str):
    """sticks a list of names into regexp at (?P<name>) and returns the compiled regexp.
    """
    return re.compile(regexp.replace("(?P<name>)", f"(?P<name>{'|'.join(names)})"))


# regexps to match against font.  each must specify (even if empty!) groups:
#  - name
#  - size
#  - face
#  - alt
#  - alpha (alphabet)
res:list[re.compile] = [
    namesToRe(['u8glib','m2icon'], r'^u8g2_font_(?P<name>)(?P<alt>)_(?P<size>[0-9]+(?:x[0-9]+)?)_(?P<face>[thm][efrnu])(?P<alpha>)$'),
    # following gets all basic fonts too!
    namesToRe(['7Segments'], r'^u8g2_font_(?:(?P<name>)_)?(?P<size>[0-9]+(?:x[0-9]+)?)(?P<alt>[BO])?_(?P<face>[thm][efrnu]|[thm])(?:_(?P<alpha>[a-z]+[0-9]?))?$'),
    # named fonts without size
    re.compile(r'^u8g2_font_(?P<name>\w+?)(?P<alt>Thin)?_(?P<size>)(?P<face>[thm8][efrnu]|[thm])(?:_(?P<alpha>[a-z]+[0-9]?))?$'),
]

class Namespace(object):
    def __init__(self, file, name, prefix=""):
        self.__file = file
        self.__name = name
        self.__prefix = prefix
        if name:
            file.write(f"{prefix}namespace {name} {{\n")
    def __enter__(self):
        return self
    def __exit__(self, type, value, traceback):
        if self.__name:
            self.__file.write(f"{self.__prefix}}} // namespace {self.__name}\n")

with (open(parent / "Fonts.txt") as f,
        open(parent/"Fonts.h", "w") as h,
        open(parent/"Fonts.cpp", "w") as cpp):
    dictGenerator = lambda: collections.defaultdict(dictGenerator)
    fonts = dictGenerator()
    notMatched = {}
    matched = 0
    total = 0

    for line in f:
        total += 1
        fontname = line.strip()
        result = None
        for i, r in enumerate(res):
            if r.match(fontname):
                result = r.search(fontname)
                break
        if not result:
            if not fontname.startswith("u8g2_font_"):
                raise Exception(f"invalid font name {fontname}")
            notMatched[fontname[10:]] = fontname
            continue
        matched += 1
        fonts[result['name'] or ""][result['size'] or ""][result['alt'] or ""][result['alpha'] or ""][result['face'] or ""] = (fontname, i)
    
    h.write(f"""// Code generated by fonts_to_cpp.py; DO NOT EDIT.
#pragma once

#include <cstdint>

// This represents a namespaced version of the U8G2 fonts.
// Matched {matched} of {total} U8G2 fonts.
// Any unmatched fonts are accessible in a 'Misc' category.

namespace Fonts {{
""")
    cpp.write(f"""// Code generated by fonts_to_cpp.py; DO NOT EDIT.
#include "fonts.h"

#include "clib/u8g2.h"

// See fonts.h for info

""")
    def fixCname(s:str, prefix:str="")->str:
        """fix name if it begins with a number"""
        if not re.match("[0-9]", s):
            return s
        if prefix:
            return prefix + s
        for k, v in {
            "0": "Zero",
            "1": "One",
            "2": "Tow",
            "3": "Three",
            "4": "Four",
            "5": "Five",
            "6": "Six",
            "7": "Seven",
            "8": "Eight",
            "9": "Nine",
        }.items():
            if s.startswith(k):
                return f"{v}{s[1:]}"

    # store (name, value, comment) until end
    cppLines:list[list[str]] = []
        
    for fontname, sizes in sorted(fonts.items()):
        fontname = fixCname(fontname)
        with Namespace(h, fontname):
            for size, alts in sorted(sizes.items()):
                size = fixCname(size, "s")
                with Namespace(h, size, " "):
                    for alt, alphas in sorted(alts.items()):
                        alt = fixCname(alt)
                        with Namespace(h, alt, "  "):
                            for alpha, faces in sorted(alphas.items()):
                                alpha = fixCname(alpha)
                                with Namespace(h, alpha, "   "):
                                    for face, result in sorted(faces.items()):
                                        u8g2Name, reIndex = result
                                        face = fixCname(face)
                                        cname = fontname
                                        fullcname = "Fonts"
                                        if fontname:
                                            cname = fontname
                                            fullcname += "::" + fontname
                                        if size:
                                            cname = size
                                            fullcname += "::" + size
                                        if alt:
                                            cname = alt
                                            fullcname += "::" + alt
                                        if alpha:
                                            fullcname += "::" + alpha
                                        if face:
                                            cname = face
                                            fullcname += "::" + face
                                        h.write(f"    // {u8g2Name}\n")
                                        h.write(f"    extern const uint8_t* {cname};\n")
                                        cppLines.append((fullcname, u8g2Name+";", f"// matched by re #{reIndex+1}"))
    # write to cpp
    maxName = 0
    maxAssign = 0
    for l in cppLines:
        if len(l[0]) > maxName:
            maxName = len(l[0])
        if len(l[1]) > maxAssign:
            maxAssign = len(l[1])
    for l in cppLines:
        cpp.write(f"const uint8_t* {l[0].ljust(maxName)} = {l[1].ljust(maxAssign)} {l[2]}\n")

    if len(notMatched):
        with Namespace(h, "Misc"):
            for k in sorted(notMatched.keys()):
                h.write(f"  // {notMatched[k]}")
                h.write(f"  {k};\n")
    h.write("} // namespace Fonts\n")


    print(f'Matched {matched} fonts; {len(notMatched)} not matched.\n')
