include Makefile.arduinoConfig

ARDUINO_INCLUDES=$(ARDUINO_USER)/libraries

U8G2_ROOT=$(ARDUINO_INCLUDES)/U8g2
U8G2_CLIB=$(U8G2_ROOT)/src/clib
U8G2_CFILES = $(shell ls $(U8G2_CLIB)/*.c)
U8G2_OBJ = $(U8G2_CFILES:.c=.o)

UTIL_HEADERS = $(shell find util -name "*.h*") util/Fonts.h
UTIL_SRC = $(shell find util -name "*.cpp") util/Fonts.cpp
UTIL_OBJ = $(UTIL_SRC:.cpp=.o)

SRC_HEADERS = $(shell find src -name "*.h*") src/img.h
SRC_SRC = $(shell find src -name "*.cpp")
SRC_OBJ = $(SRC_SRC:.cpp=.o)

TEST_SRC = $(shell find tests -name "*.cpp")
TEST_OBJ = $(TEST_SRC:.cpp=.o)
TEST_DEPS = u8x8.a $(TEST_OBJ) util.a src.a

IMGS = $(shell ls img/*)

CC = clang
CPP = clang++
CPPFLAGS = -g -Wall $(INCLUDES) -DTEST_SCREEN_OUTPUT="testdata/screens"
INCLUDES=-I$(ARDUINO_INCLUDES)/U8g2/src -I./src -I.

.PHONY: build test clean diffs
.PRECIOUS: test.exe util.a u8g2.a $(UTIL_OBJ) $(U8G2_OBJ)
all: src/img.h

test: test.exe
	./test.exe --success

IMG_DIFF_OUT = $(shell find testdata/screens -name "*.out.u8i")
IMG_DIFF_REF = $(IMG_DIFF_OUT:.out.u8i=.ref.u8i)
IMG_DIFF = $(IMG_DIFF_REF:.ref.u8i=.png)
diffs: $(IMG_DIFF)
%.png: %.out.u8i
	-u8i diff $*.out.u8i $@ $*.ref.u8i
%.png: %.ref.u8i
	-u8i diff $*.out.u8i $@ $*.ref.u8i

build: build/arduino.samd.nano_33_iot/Blink.ino.elf

build/arduino.samd.nano_33_iot/*.ino.elf: *.ino
	arduino-cli compile --fqbn arduino:samd:nano_33_iot --export-binaries --discovery-timeout=0s $^

Makefile.arduinoConfig:
	+arduino-cli config dump | grep "user:" | sed "s/  user: /ARDUINO_USER = /"  | sed "s/\\\\\\\\/\\\\//g" > $@



util/Fonts.txt: $(U8G2_CLIB)/u8g2.h
	grep -o "uint8_t u8g2_font\w*" $^ | sed 's/uint8_t //'> $@
util/Fonts.h: util/Fonts.txt util/fonts_to_cpp.py
	py util/fonts_to_cpp.py

%.o: %.cpp
	$(CPP) -c $(CPPFLAGS) $(CXXFLAGS) $(INCLUDES) $< -o $@

src/img.h: $(IMGS)
	echo "// Code generated by make and u8i; DO NOT EDIT." > $@
	echo "#pragma once" >> $@
	echo "namespace Img {" >> $@
	u8i as-c $(IMGS) >> $@
	echo "}" >> $@

u8x8.a: $(U8G2_OBJ)
	llvm-ar cr $@ $^
util.a: $(UTIL_OBJ) $(UTIL_HEADERS)
	llvm-ar cr $@ $^
src.a: $(SRC_OBJ) $(SRC_HEADERS)
	llvm-ar cr $@ $^

test.exe: $(TEST_DEPS)
	$(CPP) $(CPPFLAGS) $(LDFLAGS) $(TEST_DEPS) -o $@

clean:
	rm -f $(TEST_DEPS) $(UTIL_OBJ) $(SRC_OBJ) test.*
